#!/usr/bin/env bash

# Examples:
#
# 1st Monday	--> run-if-today 1 "Mon"
# 2nd Friday	--> run-if-today 2 "Fri"
# last Sunday	--> run-if-today [l|L] "Sun"

# Date ranges:
#
#	Week	Dates
#	1	1-7
#	2	8-14
#	3	15-21
#	4	22-28
#	5	29-lastday	(you probably need [L]ast week instead)
#	L	(lastday-6)-lastday

#set -e -x

# If is not that day of the week don't even bother running all the
# cool checks.
if [ $(date "+%a") != $2 ]
then
	exit 1
fi

# Ok, it's that day, let's run some fancy code.

# You'll need this, that's for sure.
today=$(date "+%d")

# Which week in the month are we dealing with?
case "$1" in
	[1-5])
		# Plain old nth day code.
		minday=$[ 1 + $[ 7 * $[ $1 - 1 ] ] ]
		maxday=$[ $minday + 7 ]

		if [ $today -ge $minday ] && [ $today -lt $maxday ]
		then
			# Green light, fire at will.
			exit 0
		fi
		;;
	"l" | "L")
		month=$(date "+%m")
		# April, June, September and November have 30 days.
		# All others have 31 except February, careful with that one..
		case $month in
			"02")
				# Ah evil February we meet again.
				# First we assume it's a normal February.
				lastday=28
				# Then we test if this is a leap year.
				year=$(date "+%Y")
				if [ $(date -d "$year-02-29" > /dev/null 2>&1) ]
				then
					# It's a leap year, we almost fell for that one.
					lastday=29
				fi
				;;
			"04" | "06" | "09" | "11")
				lastday=30
				;;
			*)
				lastday=31
				;;
		esac

		startlastweek=$[ $lastday - 6 ]

		if [ $today -ge $startlastweek ] && [ $today -le $lastday ]
		then
			# This is last week of the month.
			exit 0

			# And that's how you get the last week date range junior!
			#	Hmm, but dad we now use python... It's pretty simple...
			# Shush, now I'll teach you to make a C compiler with some string and a toothbrush.
			#	Here we go again... :/
		fi
		;;
	*)
		echo "$0: Unknown argument. Was expecting: 1, 2, 3, 4, 5, l or L"
		exit 2
		;;
esac

# Not the right day, maybe next time.
exit 1
